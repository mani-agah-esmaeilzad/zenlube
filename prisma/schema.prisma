// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  ONLINE
  BANK_TRANSFER
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  PICKUP
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  role           Role      @default(CUSTOMER)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  cart           Cart?
  orders         Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  sku             String?       @unique
  description     String?
  price           Decimal       @db.Decimal(10, 2)
  stock           Int           @default(0)
  viscosity       String?
  oilType         String?
  imageUrl        String?
  isFeatured      Boolean       @default(false)
  isBestseller    Boolean       @default(false)
  categoryId      String
  brandId         String
  originCountry   String?
  approvals       String?
  temperatureRange String?
  packagingSizeLit Decimal?     @db.Decimal(6, 2)
  warranty        String?
  technicalSpecs  Json?
  tags            String[]     @default([])
  averageRating   Decimal?      @db.Decimal(2, 1)
  reviewCount     Int           @default(0)
  videos          String[]     @default([])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  brand           Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  carMappings     ProductCar[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         ProductReview[]
}

model Car {
  id              String        @id @default(cuid())
  slug            String        @unique
  manufacturer    String
  model           String
  generation      String?
  engineCode      String?
  engineType      String?
  yearFrom        Int?
  yearTo          Int?
  oilCapacityLit  Decimal?      @db.Decimal(5, 2)
  viscosity       String?
  specification   String?
  imageUrl        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  productMappings ProductCar[]
}

model ProductCar {
  id        String   @id @default(cuid())
  productId String
  carId     String
  note      String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  car     Car     @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([productId, carId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Order {
  id        String       @id @default(cuid())
  userId    String
  status    OrderStatus  @default(PENDING)
  total     Decimal      @db.Decimal(10, 2)
  fullName  String
  email     String
  phone     String
  address1  String
  address2  String?
  city      String
  province  String
  postalCode String
  country   String
  paymentMethod PaymentMethod @default(COD)
  shippingMethod ShippingMethod @default(STANDARD)
  shippingCost Decimal      @db.Decimal(10, 2) @default(0)
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  customerName String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model MarketingBanner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  ctaLabel    String?
  ctaLink     String?
  imageUrl    String?
  position    String   @default("homepage-hero")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   @db.Text
  coverImage  String?
  tags        String[] @default([])
  authorName  String   @default("تیم تحریریه ZenLube")
  readMinutes Int      @default(5)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryImage {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  link        String?
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
